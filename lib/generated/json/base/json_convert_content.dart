// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:github_flutter/models/user_model.dart';
import 'package:github_flutter/generated/json/user_model_helper.dart';
import 'package:github_flutter/models/repo_model.dart';
import 'package:github_flutter/generated/json/repo_model_helper.dart';
import 'package:github_flutter/models/event_model.dart';
import 'package:github_flutter/generated/json/event_model_helper.dart';
import 'package:github_flutter/models/auth_model.dart';
import 'package:github_flutter/generated/json/auth_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}  Map<String, dynamic> toJson() {
		return getToJson<T>(runtimeType, this);
  }  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserModel:
			return userModelFromJson(data as UserModel, json) as T;			case UserPlan:
			return userPlanFromJson(data as UserPlan, json) as T;			case RepoModel:
			return repoModelFromJson(data as RepoModel, json) as T;			case UserModel:
			return userModelFromJson(data as UserModel, json) as T;			case EventModel:
			return eventModelFromJson(data as EventModel, json) as T;			case UserModel:
			return userModelFromJson(data as UserModel, json) as T;			case RepoModel:
			return repoModelFromJson(data as RepoModel, json) as T;			case EventPayload:
			return eventPayloadFromJson(data as EventPayload, json) as T;			case EventOrg:
			return eventOrgFromJson(data as EventOrg, json) as T;			case AuthModel:
			return authModelFromJson(data as AuthModel, json) as T;			case AuthApp:
			return authAppFromJson(data as AuthApp, json) as T;    }
    return data as T;
  }  static getToJson<T>(Type type, data) {
		switch (type) {			case UserModel:
			return userModelToJson(data as UserModel);			case UserPlan:
			return userPlanToJson(data as UserPlan);			case RepoModel:
			return repoModelToJson(data as RepoModel);			case UserModel:
			return userModelToJson(data as UserModel);			case EventModel:
			return eventModelToJson(data as EventModel);			case UserModel:
			return userModelToJson(data as UserModel);			case RepoModel:
			return repoModelToJson(data as RepoModel);			case EventPayload:
			return eventPayloadToJson(data as EventPayload);			case EventOrg:
			return eventOrgToJson(data as EventOrg);			case AuthModel:
			return authModelToJson(data as AuthModel);			case AuthApp:
			return authAppToJson(data as AuthApp);    }
    return data as T;
  }  static T fromJsonAsT<T>(json) {
    switch (T.toString()) {			case 'UserModel':
			return UserModel().fromJson(json) as T;			case 'UserPlan':
			return UserPlan().fromJson(json) as T;			case 'RepoModel':
			return RepoModel().fromJson(json) as T;			case 'UserModel':
			return UserModel().fromJson(json) as T;			case 'EventModel':
			return EventModel().fromJson(json) as T;			case 'UserModel':
			return UserModel().fromJson(json) as T;			case 'RepoModel':
			return RepoModel().fromJson(json) as T;			case 'EventPayload':
			return EventPayload().fromJson(json) as T;			case 'EventOrg':
			return EventOrg().fromJson(json) as T;			case 'AuthModel':
			return AuthModel().fromJson(json) as T;			case 'AuthApp':
			return AuthApp().fromJson(json) as T;    }
    return null;
  }}